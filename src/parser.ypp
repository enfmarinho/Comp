%{

#include "parser.tab.hpp"
#include <cstdio>

extern int yylex();
extern int curr_line;
extern int curr_column;

void yyerror(char *s) {
    fprintf(stderr, "at line %i and column %i: %s\n", curr_line, curr_column, s);
}

%}

%union {
    struct {
        int value;
        int line, column;
    } int_value;
    struct {
        float value;
        int line, column;
    } float_value;
    struct {
        char *value;
        int line, column;
    } string_value;
    struct {
        char *simble;
        int line, column;
    } id;
    struct {
        int line, column;
    } general_values;
} 

%token <id> ID
%token <int_value> INT_LITERAL
%token <float_value> FLOAT_LITERAL
%token <string_value> STRING_LITERAL
%token <general_values> KW_PROGRAM
%token <general_values> KW_PROCEDURE
%token <general_values> KW_BEGIN
%token <general_values> KW_END
%token <general_values> KW_IN
%token <general_values> KW_STRUCT
%token <general_values> KW_VAR
%token <general_values> KW_INT
%token <general_values> KW_FLOAT
%token <general_values> KW_STRING
%token <general_values> KW_BOOL
%token <general_values> KW_REF
%token <general_values> KW_DEREF
%token <general_values> KW_RETURN
%token <general_values> KW_WHILE
%token <general_values> KW_DO
%token <general_values> KW_OD
%token <general_values> KW_IF
%token <general_values> KW_THEN
%token <general_values> KW_ELSE
%token <general_values> KW_FI
%token <general_values> KW_TRUE
%token <general_values> KW_FALSE
%token <general_values> KW_NEW
%token <general_values> KW_NULL
%token <general_values> KW_SEMICOLUMN
%token <general_values> KW_COLUMN
%token <general_values> KW_COMMA
%token <general_values> KW_DOT
%token <general_values> KW_EXIT
%token <general_values> KW_WHEN
%token <general_values> OP_ADD
%token <general_values> OP_SUB
%token <general_values> OP_MULT
%token <general_values> OP_DIV
%token <general_values> OP_EXP
%token <general_values> OP_ASSIGN
%token <general_values> OP_NOT
%token <general_values> OP_AND
%token <general_values> OP_OR
%token <general_values> OP_SMALLER
%token <general_values> OP_SMALLER_OR_EQ
%token <general_values> OP_GREATER
%token <general_values> OP_GREATER_OR_EQ
%token <general_values> OP_EQUAL
%token <general_values> OP_NOT_EQUAL
%token <general_values> OPEN_PAREN
%token <general_values> CLOSE_PAREN
%token <general_values> OPEN_CURLY
%token <general_values> CLOSE_CURLY

// precedence related stuff
%start program

%left OP_OR
%left OP_AND
%left OP_NOT_EQUAL OP_EQUAL
%left OP_SMALLER OP_GREATER OP_SMALLER_OR_EQ OP_GREATER_OR_EQ
%left OP_ADD OP_SUB
%left OP_MULT OP_DIV

%right OP_EXP
%right OP_NOT
%right KW_REF KW_DEREF
%right KW_DOT

%%

program : KW_PROGRAM ID KW_BEGIN opt_decl_list KW_END {}
        ;

opt_decl_list : /* empty */ {}
              | decl_list {}
              ;

decl_list : decl {}
          | decl_list KW_SEMICOLUMN decl {}
          ;

decl : var_decl {}
     | proc_decl {}
     | rec_decl {}
     ;

var_decl : KW_VAR ID KW_COLUMN type {}
         | KW_VAR ID KW_COLUMN type OP_ASSIGN exp {}
         | KW_VAR ID OP_ASSIGN exp {}
         ;

opt_proc_return_type : /*empty*/ {}
                     | KW_COLUMN type {}
                     ;

proc_decl : KW_PROCEDURE ID OPEN_PAREN opt_paramfield_decl_list_comma CLOSE_PAREN opt_proc_return_type KW_BEGIN 
                proc_body KW_END {}
          ; 

proc_body : opt_stmt_list
          | opt_decl_list KW_IN opt_stmt_list
          ;

rec_decl : KW_STRUCT ID OPEN_CURLY opt_paramfield_decl_list_semicolumn CLOSE_CURLY {}
         ;

paramfield_decl : ID KW_COLUMN type {}
                ;

opt_paramfield_decl_list_comma : /* empty */
                               | paramfield_decl_list_comma {}
                               ;

opt_paramfield_decl_list_semicolumn : /* empty */
                                    | paramfield_decl_list_semicolumn {}
                                    ;

paramfield_decl_list_comma : paramfield_decl {}
                           | paramfield_decl KW_COMMA paramfield_decl_list_comma {}
                           ;

paramfield_decl_list_semicolumn : paramfield_decl {}
                                | paramfield_decl KW_SEMICOLUMN paramfield_decl_list_semicolumn {}
                                ;

opt_stmt_list : /* empty */ {}
              | stmt_list {}
              ;

stmt_list : stmt {}
          | stmt_list KW_SEMICOLUMN stmt {}
          ;

exp : exp log_op exp %prec OP_AND {}
    | exp rel_op exp %prec OP_SMALLER {}
    | exp arith_op exp %prec OP_AND {}
    | OP_NOT exp %prec OP_NOT {}
    | literal {}
    | call_stmt {}
    | KW_NEW ID {}
    | var {}
    | ref_var {}
    | deref_var {}
    | OPEN_PAREN exp CLOSE_PAREN {}
    ;

ref_var : KW_REF OPEN_PAREN var CLOSE_PAREN {}

deref_var : KW_DEREF OPEN_PAREN var CLOSE_PAREN {}
          | KW_DEREF OPEN_PAREN deref_var CLOSE_PAREN {}
          ;

var : ID {}
    | exp KW_DOT ID {}
    ;

log_op : OP_AND {}
       | OP_OR {}
       ;

rel_op : OP_SMALLER {}
       | OP_SMALLER_OR_EQ {}
       | OP_GREATER {}
       | OP_GREATER_OR_EQ {}
       | OP_EQUAL {}
       | OP_NOT_EQUAL {}
       ;

arith_op : OP_ADD {}
         | OP_SUB {}
         | OP_MULT {}
         | OP_DIV {}
         | OP_EXP {}
         ;

literal : FLOAT_LITERAL {}
        | INT_LITERAL {}
        | STRING_LITERAL {}
        | bool_literal {}
        | KW_NULL {}
        ;

bool_literal : KW_TRUE {}
             | KW_FALSE {}
             ;

stmt : assign_stmt {}
     | if_stmt {}
     | while_stmt {} 
     | return_stmt {}
     | call_stmt {}
     | do_while_stmt {}
     ;

assign_stmt : var OP_ASSIGN exp {}
            | deref_var OP_ASSIGN exp {}
            ;

opt_else_stmt : /* empty */ {}
              | KW_ELSE opt_stmt_list {}
              ;

if_stmt : KW_IF exp KW_THEN opt_stmt_list opt_else_stmt KW_FI {}
        ;

while_stmt : KW_WHILE exp KW_DO opt_stmt_list KW_OD {}
           ;

return_stmt : KW_RETURN exp {}
            ;

opt_exp_list : /* empty */ {}
             | exp_list {}
             ;

exp_list : exp {}
         | exp_list KW_COMMA exp {}

call_stmt : ID OPEN_PAREN opt_exp_list CLOSE_PAREN {}
          ;

do_while_stmt : KW_DO do_while_opt_stmt_list KW_OD {}
              ;

do_while_opt_stmt_list : /* empty */ {}
                       | if_stmt {}
                       | assign_stmt {}
                       | return_stmt {}
                       | call_stmt {}
                       | do_while_stmt {}
                       | KW_EXIT KW_WHEN exp {}
                       ;

type : KW_FLOAT {}
     | KW_INT {}
     | KW_STRING {}
     | KW_BOOL {}
     | ID {}
     | KW_REF OPEN_PAREN type CLOSE_PAREN {}
     ;

%%
