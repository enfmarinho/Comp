// TODO error case 1: having a constructor for decl_list deleting $$, may very well free memory twice

%{
#include "parser.tab.hpp"
#include "symbol_table.hpp"
#include "symbol_table_stack.hpp"
#include "type.hpp"

#include <cstdlib>
#include <vector>
#include <ifstream>
#include <cstdio>

extern int yylex();
extern int past_token_line;
extern int past_token_column;
extern std::ifstream file_out;

struct Data {
    std::string var_name;
    std::string label; 
    StmtListType stmt_list;
    Type type;

    Data(std::string var_name, std::string label, 
            StmtListType stmt_list, Type type) : var_name(var_name), label(label), 
                                                 stmt_list(stmt_list), type(type) {}
};

struct Literal {
    Type type;
    std::string lexema;

    Literal(Literal cp) = default;
    Literal(Type type, char *l) : type(type) {
        lexema = std::string(l);
    }
};

TypePtr expected_proc_return_type = new Type(NoType);
SymbolTableStack symbol_table_stack;

StmtListType decl_buf;
std::string current_end_do_while_label;
std::vector<int> return_label_stack;

int lc = 0; // label counter
int vc = 0; // var counter
int rlc = 0; // return label counter

StmtListType conc_list(StmtListType lhs, StmtListType rhs) {
    StmtListType stmt_list;
    for (std::string decl : lhs) {
        stmt_list.push_back(decl);
    }
    for (std::string decl : rhs) {
        stmt_list.push_back(decl);
    }
    return stmt_list;
}

TypeList convert_to_type_list(DataList data_list) {
    TypeList type_list;
    for (Data data : data_list) {
        type_list.push_back(data.type);
    }
    return type_list;
}

void conc_list_in_place(StmtListType &lhs, StmtListType rhs) {
    for (std::string decl : rhs) {
        lhs.push_back(decl);
    }
}

std::string new_var(Type type, std::string var_name="") {
    if (var_name == "")
        std::string var_name = "t" + to_string(vc++);

    decl_buf.push_back(type_name(type) + " " + var_name + ";\n");
    return var_name;
}

std::string new_label(std::string label="") {
    if (label == "") 
        label = "l" + std::to_string(lc++);

    return label;
}

std::string new_return_label() {
    return "rl" + std::to_string(rlc++);
}

std::string return_func() {
    std::string func = "return_label:\n";
    for (int i = 0; i < return_label_stack.size(); ++i) {
        func += "if (return_label_stack.top() == ";
        func += std::to_string(i);
        func += ") goto rl";
        func += std::to_string(i);
        func += ";\n";
    }
    return func;
}

void flush_file(StmtListType instruction_list) {
    for (std::string decl : decl_buf) {
        file_out << decl;
    }

    file_out << "int main() {\n  goto main;";
    for (std::strint instruction : instruction_list) {
        file_out << instruction;
    }
    file_out << return_func();
    file_out << "}";
}

void yyerror(const char *s) {
    fprintf(stderr, "at line %i and column %i: %s\n", past_token_line, past_token_column, s);
}

std::string type_name(TypePtr type) {
    if (type->base_type == Void) {
        return "void";
    } else if (type->base_type == Int) {
        return "int";
    } else if (type->base_type == Float) {
        return "float";
    } else if (type->base_type == String) {
        return "string";
    } else if (type->base_type == Bool) {
        return "bool";
    } else if (type->base_type == Struct) {
        std::string name = "struct ";
        name += type->struct_type_name;
        return name;
    } else if (type->base_type == Ref) {
        name += type_name(type->referenced_type);
        name += "*";
        return name;
    } else if (type->base_type == Struct) {
        return type->struct_type_name;
    } else {
        // Should not reach this, since does not make sence to call
        // this functions when type is Error or NoType
        assert("false");
    }
    return "";
}

void assert_type(TypePtr lhs, TypePtr rhs, std::string error_message="") {
    if (error_message == "") {
        error_message = "Mismatched types: "; 
        error_message += "expected ";
        error_message += type_name(lhs);
        error_message += " but found ";
        error_message += type_name(rhs);
    }

    if (lhs->base_type != rhs->base_type)
        yyerror(error_message.c_str());
    if (lhs->base_type == Ref)
        assert_type(lhs->referenced_type, rhs->referenced_type);
    if (lhs->base_type == Struct && lhs->struct_type_name != rhs->struct_type_name)
        yyerror(error_message.c_str());
}

bool types_match(Type lhs, Type rhs) {
    if (lhs->base_type != rhs->base_type)
        return false;
    if (lhs->base_type == Ref)
        return types_match(lhs->referenced_type, rhs->referenced_type);
    if (lhs->base_type == Struct && lhs->struct_type_name != rhs->struct_type_name)
        return false;

    return true;
}

void assert_type_comp_op(TypePtr lhs, TypePtr rhs) {
    if (lhs->base_type != Int and lhs->base_type != Float) 
        yyerror("Comparison operations must be performed for int or for float");
    std::string error_message = "Trying to perform an comparison operation with different type variables: ";
    error_message += type_name(lhs);
    error_message += " and ";
    error_message += type_name(rhs);
    assert_type(lhs, rhs, error_message);
}

void assert_type_arith_op(TypePtr lhs, TypePtr rhs) {
    if (lhs->base_type != Int and lhs->base_type != Float) 
        yyerror("Arithmetic operations must be performed only on int types or float types");
    std::string error_message = "Trying to perform an arithmetic operation with different type variables: ";
    error_message += type_name(lhs);
    error_message += " and ";
    error_message += type_name(rhs);
    assert_type(lhs, rhs, error_message);
}

void assert_bool(TypePtr i) {
    if (i->base_type != Bool)
        yyerror("Boolean operations must be performed only on bool types");
}

void assert_condition(TypePtr type) {
    if(type->base_type != Bool) 
        yyerror("condition must be bool");
}

%}

%code requires {
    #include <vector>
    #include "type.hpp"

    using StmtListType = std::vector<std::string>;
    using TypePtr = Type*;
    using TypeList = std::vector<TypePtr>;
    using TypeListPtr = TypeList*;

    using DataList = std::vector<Data*>;
}

%union {
    struct {
        char *value;
        int line, column;
    } literal_value;
    struct {
        char *name;
        int line, column;
    } id;
    TypePtr type;
    TypeListPtr type_list;
    Data* data;
    DataList* data_list

    Literal* literal;
    StmtListType *stmt_list;
}

// %destructor { delete $$.name; } <id>
// %destructor { delete $$.value; } <literal_value>
// %destructor { delete $$; } <type>
// %destructor { delete $$; } <type_list>

%token <id> ID
%token <literal_value> INT_LITERAL
%token <literal_value> FLOAT_LITERAL
%token <literal_value> STRING_LITERAL
%token KW_PROGRAM
%token KW_PROCEDURE
%token KW_BEGIN
%token KW_END
%token KW_IN
%token KW_STRUCT
%token KW_VAR
%token KW_INT
%token KW_FLOAT
%token KW_STRING
%token KW_BOOL
%token KW_REF
%token KW_DEREF
%token KW_RETURN
%token KW_WHILE
%token KW_DO
%token KW_OD
%token KW_IF
%token KW_THEN
%token KW_ELSE
%token KW_FI
%token KW_TRUE
%token KW_FALSE
%token KW_NEW
%token KW_NULL
%token KW_SEMICOLUMN
%token KW_COLUMN
%token KW_COMMA
%token KW_DOT
%token KW_EXIT
%token KW_WHEN
%token OP_ADD
%token OP_SUB
%token OP_MULT
%token OP_DIV
%token OP_EXP
%token UMINUS
%token OP_ASSIGN
%token OP_NOT
%token OP_AND
%token OP_OR
%token OP_SMALLER
%token OP_SMALLER_OR_EQ
%token OP_GREATER
%token OP_GREATER_OR_EQ
%token OP_EQUAL
%token OP_NOT_EQUAL
%token OPEN_PAREN
%token CLOSE_PAREN
%token OPEN_CURLY
%token CLOSE_CURLY

%type <literal> literal
%type <literal> bool_literal

%type <data> call_stmt
%type <data> exp
%type <data> var
%type <data> deref_var
%type <data> ref_var
%type <data> decl
%type <data> var_decl
%type <data> rec_decl
%type <data> proc_decl
%type <stmt_list> assign_stmt
%type <data> opt_else_stmt

%type <stmt_list> if_stmt
%type <stmt_list> stmt
%type <stmt_list> opt_stmt_list
%type <stmt_list> stmt_list
%type <stmt_list> while_stmt
%type <stmt_list> do_while
%type <stmt_list> opt_do_while_stmt_list
%type <stmt_list> do_while_stmt_list
%type <stmt_list> do_while_stmt
%type <stmt_list> return_stmt

%type <type> type
%type <type> opt_proc_return_type

%type <data> paramfield_decl
%type <data_list> opt_paramfield_decl_list_comma
%type <data_list> paramfield_decl_list_comma

%type <data_list> opt_paramfield_decl_list_semicolumn
%type <data_list> paramfield_decl_list_semicolumn

%type <data_list> opt_arguments_list
%type <data_list> argument_list
%type <stmt_list> opt_decl_list
%type <stmt_list> decl_list

// precedence related stuff
%start program

%left OP_OR
%left OP_AND

%nonassoc OP_NOT_EQUAL OP_EQUAL
%nonassoc OP_SMALLER OP_GREATER OP_SMALLER_OR_EQ OP_GREATER_OR_EQ

%left OP_ADD OP_SUB
%left OP_MULT OP_DIV

%right OP_EXP
%right UMINUS OP_NOT
%nonassoc OPEN_PAREN CLOSE_PAREN
%right KW_DOT
%right KW_REF KW_DEREF

%%

program : KW_PROGRAM ID KW_BEGIN opt_decl_list KW_END {
            Type type;
            if (!symbol_table_stack.consult("main", type)) {
                yyerror("Missing entry point: a procedure named main has to be declared");
            }
            flush_file($4);
        }
        ;

opt_decl_list : /* empty */ { $$ = StmtListType(); }
              | decl_list { 
                  $$ = new StmtListType();
                  conc_list_in_place(*$$, *$1);
              }
              ;

decl_list : decl {
              $$ = new StmtListType();
              conc_list_in_place($$, $1->stmt_list);
          }
          | decl_list KW_SEMICOLUMN decl {
              // TODO see error case 1
              $$ = $1;
              conc_list_in_place($$, $3->stmt_list);
          }
          ;

decl : var_decl { 
         $$ = new Data(*$1);
     }
     | proc_decl { 
         $$ = new Data(*$1);
     }
     | rec_decl { 
         $$ = new Data(*$1);
     }
     ;

var_decl : KW_VAR ID KW_COLUMN type {
    symbol_table_stack.insert({$2.name, *$4});
    new_var(*$4, $2.name);
    $$ = new Data("", "", {}, Type(None));
}
| KW_VAR ID KW_COLUMN type OP_ASSIGN exp {
    assert_type($4, $6);
    symbol_table_stack.insert({$2.name, *$4});
    new_var(*$4, $2.name);
    $$ = new Data("", "", {std::string($2.name) + " = " + $6->var_name + ";\n"}, Type(None));
}
| KW_VAR ID OP_ASSIGN exp {
    symbol_table_stack.insert({$2.name, *$4});
    new_var($4->type, $2.name);
    $$ = new Data("", "", {std::string($2.name) + " = " + $4->var_name + ";\n"}, Type(None));
}
;

opt_proc_return_type : /*empty*/ {
    $$ = new Type(Void);
}
| KW_COLUMN type {
    $$ = new Type(*$2);
}
;

proc_decl : KW_PROCEDURE {symbol_table_stack.open_scope();} ID OPEN_PAREN opt_paramfield_decl_list_comma CLOSE_PAREN
            opt_proc_return_type {*expected_proc_return_type = *$7;} KW_BEGIN proc_body KW_END {
              symbol_table_stack.close_scope();
              symbol_table_stack.insert({$3.name, Type(Procedure, convert_to_type_list(*$5), $7)});

              // Declare param variables 
              for (Data data : *$5) {
                  new_var(data.type, data.var_name);
              }
                
              std::string label = new_label(std::string($3.name));
              StmtListType stmt_list;
              stmt_list.push_back(label + ":\n");
              conc_list_in_place(stmt_list, *$10)
              $$ = new Data("", "", stmt_list, Type(expected_proc_return_type));
              expected_proc_return_type = Type(NoType);
          }
          ; 

proc_body : opt_stmt_list {}
          | opt_decl_list KW_IN opt_stmt_list {}
          ;

rec_decl : KW_STRUCT {symbol_table_stack.open_scope();} ID OPEN_CURLY opt_paramfield_decl_list_semicolumn CLOSE_CURLY {
    SymbolTable struct_table = symbol_table_stack.top();
    symbol_table_stack.close_scope();
    symbol_table_stack.insert({$3.name, Type(Struct, $3.name, &struct_table)});
    std::string struct_decl = "struct ";
    struct_decl += $3.name;
    struct_decl += "{\n";

    for (Data stmt : $5->stmt_list) {
        struct_decl += type_name(data.type);
        struct_decl += " ";
        struct_decl += data.var_name;
        struct_decl += ";\n";
    }
    struct_decl += "};\n";

    $$ = new Data("", "", {struct_decl}, Type(None));
}
;

paramfield_decl : ID KW_COLUMN type {
                    symbol_table_stack.insert({$1.name, *$3});
                    $$ = new Data($1.name, "", {}, *$3);
                }
                ;

opt_paramfield_decl_list_comma : /* empty */ { $$ = new DataList(); }
                               | paramfield_decl_list_comma { 
                                   $$ = new DataList();
                                   *$$ = *$1; // TODO probably needs to be explicity defined
                               }
                               ;

opt_paramfield_decl_list_semicolumn : /* empty */ { $$ = new Data_list(); }
                                    | paramfield_decl_list_semicolumn {
                                        $$ = new DataList();
                                        *$$ = *$1;
                                    }
                                    ;

paramfield_decl_list_comma : paramfield_decl {
                               $$ = new DataList();
                               $$->push_back(*$1);
                           }
                           | paramfield_decl_list_comma KW_COMMA paramfield_decl {
                               $$ = $1;
                               $$->push_back(*$3);
                           }
                           ;

paramfield_decl_list_semicolumn : paramfield_decl {
                                    $$ = new DataList();
                                    $$->push_back(*$1);
                                }
                                | paramfield_decl_list_semicolumn KW_SEMICOLUMN paramfield_decl {
                                    $$ = *$1
                                    $$->push_back(*$3);
                                }
                                ;

opt_stmt_list : /* empty */ {
                  $$ = new StmtListType();
              }
              | stmt_list {
                  $$ = new StmtListType();
                  conc_list_in_place(*$$, *$1);
              }
              ;

stmt_list : stmt {
              $$ = new StmtListType();
              conc_list_in_place(*$$, *$1);
          }
          | stmt_list KW_SEMICOLUMN stmt {
              // TODO see error case 1
              $$ = $1;
              conc_list_in_place(*$$, *$3);
          }
          ;

stmt : assign_stmt { 
         $$ = new StmtListType();
         conc_list_in_place(*$$, *$1);
     }
     | if_stmt {
         $$ = new StmtListType();
         conc_list_in_place(*$$, *$1);
     }
     | while_stmt {
         $$ = new StmtListType();
         conc_list_in_place(*$$, *$1);
     }
     | return_stmt { 
         if (types_match(expected_proc_return_type, Type(NoType))) {
             yyerror("Return stmt must be declared only within a procedure scope");
         }
         if (!types_match(*$1, *expected_proc_return_type)) {
             std::string error_message = "Mismatched types: returns ";
             error_message += type_name($1);
             error_message += " expected ";
             error_message += type_name(expected_proc_return_type);
             yyerror(error_message.c_str());
         }
         $$ = new StmtListType();
         conc_list_in_place(*$$, *$1);
     }
     | call_stmt {
         $$ = new StmtListType();
         conc_list_in_place(*$$, $1->stmt_list);
     }
     | do_while {
         $$ = new StmtListType();
         conc_list_in_place(*$$, *$1);
     }
     ;

exp : exp OP_AND exp { 
        assert_bool($1);
        assert_bool($3);

        std::string var_name = new_var();
        StmtListType stmt_list;
        conc_list_in_place(stmt_list, $1->stmt_list);
        conc_list_in_place(stmt_list, $3->stmt_list);
        stmt_list.push_back(var_name + " = " + $1->var_name + "&&" + $3->var_name + ";\n");
        $$ = new Data(var_name, "", stmt_list, Type(*$1));
    }
    | exp OP_OR exp {
        assert_bool($1);
        assert_bool($3);

        std::string var_name = new_var();
        StmtListType stmt_list;
        conc_list_in_place(stmt_list, $1->stmt_list);
        conc_list_in_place(stmt_list, $3->stmt_list);
        stmt_list.push_back(var_name + " = " + $1->var_name + "||" + $3->var_name + ";\n");
        $$ = new Data(var_name, "", stmt_list, Type(*$1));
    }
    | OP_NOT exp %prec OP_NOT {
        assert_bool($2);

        std::string var_name = new_var();
        StmtListType stmt_list = $2->stmt_list;
        stmt_list.push_back(var_name + " = !" + $2->var_name + ";\n");
        $$ = new Data(var_name, "", $2->stmt_list, Type(*$1));
    }

    | exp OP_SMALLER exp  {
        assert_type_comp_op($1, $3); 

        std::string var_name = new_var();
        StmtListType stmt_list;
        conc_list_in_place(stmt_list, $1->stmt_list);
        conc_list_in_place(stmt_list, $3->stmt_list);
        stmt_list.push_back(var_name + " = " + $1->var_name + "<" + $3->var_name + ";\n");
        $$ = new Data(var_name, "", stmt_list, Type(Bool));
    }
    | exp OP_SMALLER_OR_EQ exp  {
        assert_type_comp_op($1, $3); 

        std::string var_name = new_var();
        StmtListType stmt_list;
        conc_list_in_place(stmt_list, $1->stmt_list);
        conc_list_in_place(stmt_list, $3->stmt_list);
        stmt_list.push_back(var_name + " = " + $1->var_name + "<=" + $3->var_name + ";\n");
        $$ = new Data(var_name, "", stmt_list, Type(Bool));
    }
    | exp OP_GREATER exp  {
        assert_type_comp_op($1, $3); 

        std::string var_name = new_var();
        StmtListType stmt_list;
        conc_list_in_place(stmt_list, $1->stmt_list);
        conc_list_in_place(stmt_list, $3->stmt_list);
        stmt_list.push_back(var_name + " = " + $1->var_name + ">" + $3->var_name + ";\n");
        $$ = new Data(var_name, "", stmt_list, Type(Bool));
    }
    | exp OP_GREATER_OR_EQ exp  {
        assert_type_comp_op($1, $3); 

        std::string var_name = new_var();
        StmtListType stmt_list;
        conc_list_in_place(stmt_list, $1->stmt_list);
        conc_list_in_place(stmt_list, $3->stmt_list);
        stmt_list.push_back(var_name + " = " + $1->var_name + ">=" + $3->var_name + ";\n");
        $$ = new Data(var_name, "", stmt_list, Type(Bool));
    }
    | exp OP_EQUAL exp  {
        assert_type_comp_op($1, $3); 

        std::string var_name = new_var();
        StmtListType stmt_list;
        conc_list_in_place(stmt_list, $1->stmt_list);
        conc_list_in_place(stmt_list, $3->stmt_list);
        stmt_list.push_back(var_name + " = " + $1->var_name + "==" + $3->var_name + ";\n");
        $$ = new Data(var_name, "", stmt_list, Type(Bool));
    }
    | exp OP_NOT_EQUAL exp  {
        assert_type_comp_op($1, $3); 

        std::string var_name = new_var();
        StmtListType stmt_list;
        conc_list_in_place(stmt_list, $1->stmt_list);
        conc_list_in_place(stmt_list, $3->stmt_list);
        stmt_list.push_back(var_name + " = " + $1->var_name + "!=" + $3->var_name + ";\n");
        $$ = new Data(var_name, "", stmt_list, Type(Bool));
    }

    | exp OP_ADD exp {
        assert_type_arith_op($1, $3); 

        std::string var_name = new_var();
        StmtListType stmt_list;
        conc_list_in_place(stmt_list, $1->stmt_list);
        conc_list_in_place(stmt_list, $3->stmt_list);
        stmt_list.push_back(var_name + " = " + $1->var_name + "+" + $3->var_name + ";\n");
        $$ = new Data(var_name, "", stmt_list, Type(*$1));
    }
    | exp OP_SUB exp {
        assert_type_arith_op($1, $3); 

        std::string var_name = new_var();
        StmtListType stmt_list;
        conc_list_in_place(stmt_list, $1->stmt_list);
        conc_list_in_place(stmt_list, $3->stmt_list);
        stmt_list.push_back(var_name + " = " + $1->var_name + "-" + $3->var_name + ";\n");
        $$ = new Data(var_name, "", stmt_list, Type(*$1));
    }
    | exp OP_MULT exp {
        assert_type_arith_op($1, $3); 

        std::string var_name = new_var();
        StmtListType stmt_list;
        conc_list_in_place(stmt_list, $1->stmt_list);
        conc_list_in_place(stmt_list, $3->stmt_list);
        stmt_list.push_back(var_name + " = " + $1->var_name + "*" + $3->var_name + ";\n");
        $$ = new Data(var_name, "", stmt_list, Type(*$1));
    }
    | exp OP_DIV exp {
        assert_type_arith_op($1, $3); 

        std::string var_name = new_var();
        StmtListType stmt_list;
        conc_list_in_place(stmt_list, $1->stmt_list);
        conc_list_in_place(stmt_list, $3->stmt_list);
        stmt_list.push_back(var_name + " = " + $1->var_name + "/" + $3->var_name + ";\n");
        $$ = new Data(var_name, "", stmt_list, Type(*$1));
    }
    | exp OP_EXP exp {
        assert_type_arith_op($1, $3); 

        std::string var_name = new_var();
        StmtListType stmt_list;
        conc_list_in_place(stmt_list, $1->stmt_list);
        conc_list_in_place(stmt_list, $3->stmt_list);
        // TODO fix this later, OP_EXP is just a OP_MULT at the moment
        stmt_list.push_back(var_name + " = " + $1->var_name + "*" + $3->var_name + ";\n");
        $$ = new Data(var_name, "", stmt_list, Type(*$1));
    }
    | OP_SUB exp %prec UMINUS {
        assert_type_arith_op($2, $2); 

        std::string var_name = new_var();
        stmt_list.push_back(var_name + " = -" + $2->var_name + ";\n");
        $$ = new Data(var_name, "", $2->stmt_list, Type(*$2));
    }
    | literal { 
        $$ = new Data($1->lexema, "", {}, $1->type);
    }
    | call_stmt { 
        $$ = new Data(*$1);
    }
    | KW_NEW ID { 
        Type id_type;
        symbol_table_stack.consult($2.name, id_type);
        if (id_type.base_type != Struct) 
            yyerror("Use new keyword only to instantiate structs");

        Type type(Struct, $2.name)
        std::string var_name = new_var(type, $2.name);
        $$ = new Data(var_name, "", {}, type); 
    }
    | var { 
        $$ = $1;
    }
    | ref_var { 
        $$ = $1;
    }
    | deref_var { 
        $$ = $1;
    }
    | OPEN_PAREN exp CLOSE_PAREN { 
        $$ = new Data(*$2);
    }
    ;

ref_var : KW_REF OPEN_PAREN var CLOSE_PAREN { $$ = new Data($3->var_name, "", {}, Type(Ref, $3->type)); }

deref_var : KW_DEREF OPEN_PAREN var CLOSE_PAREN { 
              if ($3->base_type != Ref) 
                  yyerror("Trying to deref a non ref type");

              $$ = new Data(std::string("*") + $3->var_name, "", {}, *($3->referenced_type)); 
          }
          | KW_DEREF OPEN_PAREN deref_var CLOSE_PAREN { 
              if ($3->base_type != Ref) 
                  yyerror("Trying to deref a non ref type");

              $$ = new Data(std::string("*") + $3->var_name, "", {}, *($3->referenced_type)); 
          }
          ;

var : ID { 
    Type id_type;
    if (!symbol_table_stack.consult($1.name, id_type)) {
        std::string error_message = "var \'";
        error_message += $1.name;
        error_message += "\' not declared";
        yyerror(error_message.c_str());
    }
    
    $$ = new Data($1.name, "", {}, Type(id_type)); 
}
| exp KW_DOT ID {
    std::string struct_name = $1->struct_type_name;
    if ($1->base_type != Struct) 
        yyerror("Use the dot reference operation only for structs");

    Type struct_type, member_type;
    if (!symbol_table_stack.consult(struct_name, struct_type)) {
        // Should never fall here
        std::string error_message = "struct \'";
        error_message += struct_name;
        error_message += "\' not declared";
        yyerror(error_message.c_str());
    }

    if (!struct_type.symbol_table->consult($3.name, member_type)) {
        std::string error_message = "No member \'";
        error_message += $3.name;
        error_message += "\' in ";
        error_message += struct_name;
        yyerror(error_message.c_str());
    }
    
    $$ = new Data($1->var_name + "." + id.name, "", {}, Type(member_type)); 
}
;

literal : FLOAT_LITERAL {
    $$ = new Literal(Type(Float), $1.literal_value.float);
}
| INT_LITERAL {
    $$ = new Literal(Type(Int), $1.literal_value.value);
}
| STRING_LITERAL {
    $$ = new Literal(Type(String), $1.literal_value.value);
}
| bool_literal { 
    $$ = new Literal(*$1); 
} 
| KW_NULL {
    $$ = new Literal(Type(Ref, nullptr), "null");
}
;

bool_literal : KW_TRUE {
    $$ = new Literal(Type(Bool), "true");
}
| KW_FALSE {
    $$ = new Literal(Type(Bool), "false");
}
;

assign_stmt : var OP_ASSIGN exp {
                assert_type($1->type, $3->type);
                $$ = new StmtListType();
                conc_list_in_place(*$$, $3->stmt_list);
                $$->push_back($1->var_name + " = " + exp->var_name + ";\n");
            }
            | deref_var OP_ASSIGN exp {
                assert_type($1->type, $3->type);
                $$ = new StmtListType();
                conc_list_in_place(*$$, $3->stmt_list);
                $$->push_back($1->var_name + " = " + exp->var_name + ";\n");
            }
            ;

opt_else_stmt : /* empty */ { 
                  StmtListType stmt_list;
                  std::string label = new_label();
                  stmt_list->push_back(label + ":\n");
                  $$ = new Data("", label, stmt_list, Type(NoType));
              }
              | KW_ELSE opt_stmt_list {
                  StmtListType stmt_list;
                  std::string label = new_label();
                  stmt_list->push_back(label + ":\n");
                  conc_list_in_place(stmt_list, *$2);
                  $$ = new Data("", label, stmt_list, Type(NoType));
              }
              ;

if_stmt : KW_IF exp {assert_condition($2);} KW_THEN opt_stmt_list opt_else_stmt KW_FI {
            StmtListType stmt_list;
            stmt_list.push_back(std::string("if (!") + $2->var_name + ") goto " + $6->label + ";\n");
            conc_list_in_place(stmt_list, $5->stmt_list);
            std::string end_if_stmt_label = new_label();
            stmt_list.push_back(std::string("goto ") + end_if_stmt_label + ";\n");
            conc_list_in_place(stmt_list, $6->stmt_list);
            stmt_list.push_back(end_if_stmt_label + ":\n");

            $$ = new StmtListType(stmt_list);
        }
        ;

while_stmt : KW_WHILE exp {assert_condition($2);} KW_DO opt_stmt_list KW_OD {}
           ;

return_stmt : KW_RETURN exp {
    $$ = new StmtListType();
    conc_list_in_place($$, $2->stmt_list)
    $$->stmt_list.push_back("returned_value = " + $2->var_name + ";\n");
    $$->stmt_list.push_back("goto return_label;");
}
;

opt_arguments_list : /* empty */ { $$ = new DataList(); }
                   | argument_list { 
                       $$ = new TypeList();
                       *$$ = *$1; 
                   }
                   ;

argument_list : exp { 
                  $$ = new TypeList();
                  $$->push_back(*$1);
              }
              | argument_list KW_COMMA exp {
                  // TODO see error case 1
                  $$ = $1;
                  $$->push_back(*$3);
              }

call_stmt : ID OPEN_PAREN opt_arguments_list CLOSE_PAREN {
    Type proc_type;
    if (!symbol_table_stack.consult($1.name, proc_type)) {
        std::string error_message = "procedure \'";
        error_message += $1.name;
        error_message += "\' not declared";
        yyerror(error_message.c_str());
    }

    // Check if number of arguments passed match with expected number of arguments
    DataList param_types = *$3;
    DataList expected_param_types = proc_type.param_types;
    if (param_types.size() != expected_param_types.size()) {
        std::string error_message = "Procedure \'";
        error_message += $1.name;
        error_message += "\' expected ";
        error_message += std::to_string(expected_param_types.size());
        error_message += " arguments, but received ";
        error_message += std::to_string(param_types.size());
        yyerror(error_message.c_str());
    }
    
    // Check if arguments types match with expected types and initialize them
    StmtListType stmt_list;
    for (int idx = 0; idx < param_types.size(); ++idx) {
        if (!types_match(param_types[idx].type, expected_param_types[idx].type)) {
            std::string error_message = "Argument ";
            error_message += std::to_string(idx);
            error_message += " does not match expected type for procedure \'";
            error_message += $1.name;
            error_message += "\'";
            yyerror(error_message.c_str());
        }

        stmt_list.push_back(expected_param_types[idx].var_name + " = " + param_types[idx].var_name + ";\n");
    }
     
    stmt_list.push_back(std::string("goto ") + $1.name);
    std::string current_pos = new_return_label();
    stmt_list.push_back(new_return_label + ":\n");
    return_label_stack.push_back(current_pos);
    $$ = new Data("", "", stmt_list, Type(*(proc_type.return_type)));
}
;

// TODO this is wrong, there should be a stmt_list->push_back("goto" + while_start) in case exp is true
do_while : KW_DO {current_end_do_while_label = new_label("end_do_while");} opt_do_while_stmt_list KW_OD {
             $$ = new StmtListType();
             conc_list_in_place(*$$, *$3);
             $$->push_back(current_end_do_while_label + ":\n");
         }
         ;

opt_do_while_stmt_list : /* empty */ {
                           $$ = new StmtListType();
                       }
                       | do_while_stmt_list {
                           $$ = new StmtListType();
                           conc_list_in_place(*$$, *$1);
                       }

do_while_stmt_list : do_while_stmt {
                       $$ = new StmtListType();
                       conc_list_in_place(*$$, *$3);
                   }
                   | do_while_stmt_list KW_SEMICOLUMN do_while_stmt {
                       // TODO see error case 1
                       $$ = $1;
                       conc_list_in_place(*$$, *$3);
                   }

do_while_stmt : if_stmt { 
                  $$ = new StmtListType();
                  conc_list_in_place(*$$, *$1);
              }
              | assign_stmt {
                  $$ = new StmtListType();
                  conc_list_in_place(*$$, *$1);
              }
              | return_stmt {
                  // TODO check return_stmt type
                  $$ = new StmtListType();
                  conc_list_in_place(*$$, *$1);
              }
              | call_stmt {
                  $$ = new StmtListType();
                  conc_list_in_place(*$$, $1->stmt_list);
              }
              | while_stmt { 
                  $$ = new StmtListType();
                  conc_list_in_place(*$$, *$1);
              }
              | KW_EXIT KW_WHEN exp { 
                  assert_condition($3); 
                  $$ = new StmtListType();
                  conc_list_in_place(*$$, $3->stmt_list);
                  $$->push_back(std::string("goto ") + current_end_do_while_label + ";\n");
              }
              ;

type : KW_FLOAT { $$ = new Type(Float); }
     | KW_INT { $$ = new Type(Int); }
     | KW_STRING { $$ = new Type(String); }
     | KW_BOOL { $$ = new Type(Bool); }
     | ID { $$ = new Type(Struct, $1.name); }
     | KW_REF OPEN_PAREN type CLOSE_PAREN { $$ = new Type(Ref, $3); }
     ;

%%
