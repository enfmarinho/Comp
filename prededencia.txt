E -> E || E | E && E | E < E | E <= E | E > E | E >= | E = E | E <> E | E + E | E - E | E * E | E / E | E ^ E | (E) | E . E

T_EXP ::= L_EXP

L_EXP ::= LU_EXP L2_EXP
L2_EXP ::= || LU_EXP L2_EXP
L2_EXP ::= ''

LU_EXP ::= R_EXP LU2_EXP
LU2_EXP ::= && R_EXP LU2_EXP
LU2_EXP ::= ''

R_EXP ::= A_EXP R2_EXP
R2_EXP ::= < A_EXP R2_EXP
R2_EXP ::= <= A_EXP R2_EXP
R2_EXP ::= > A_EXP R2_EXP
R2_EXP ::= >= A_EXP R2_EXP
R2_EXP ::= = A_EXP R2_EXP
R2_EXP ::= <> A_EXP R2_EXP
R2_EXP ::= ''

A_EXP ::= AU_EXP A2_EXP
A2_EXP ::= + AU_EXP A2_EXP
A2_EXP ::= - AU_EXP A2_EXP
A2_EXP ::= ''

AU_EXP ::= POW_EXP AU2_EXP
AU2_EXP ::= * POW_EXP AU2_EXP
AU2_EXP ::= / POW_EXP AU2_EXP
AU2_EXP ::= ''

# PRECISA REVER  
POW_EXP ::= POW2_EXP PT_EXP
POW2_EXP ::= ^ POW2_EXP PT_EXP
POW2_EXP ::= ''

PT_EXP ::= FIM_EXP PT2_EXP
PT2_EXP ::= . PT2_EXP FIM_EXP
PT2_EXP ::= ''

# PRECISA REVER
FIM_EXP ::= (T_EXP)
FIM_EXP ::= VAR
FIM_EXP ::= LITERAL
FIM_EXP ::= not VAR
FIM_EXP ::= not LITERAL






