PROGRAM ::= program NAME begin T_PROGRAM end

T_PROGRAM ::= DECL U_PROGRAM
T_PROGRAM ::= ''

U_PROGRAM ::= ; DECL U_PROGRAM
U_PROGRAM ::= ''

DECL ::= VAR_DECL
DECL ::= PROC_DECL
DECL ::= REC_DECL

VAR_DECL ::= var NAME T_VAR_DECL

T_VAR_DECL ::= : TYPE U_VAR_DECL
T_VAR_DECL ::= := EXP

U_VAR_DECL ::= := EXP
U_VAR_DECL ::= ''

PROC_DECL ::= procedure NAME ( T_PROC_DECL ) U_PROC_DECL begin V_PROC_DECL STMT_LIST end

T_PROC_DECL ::= PARAMFIELD_DECL X_PROC_DECL
T_PROC_DECL ::= ''

X_PROC_DECL ::= , PARAMFIELD_DECL X_PROC_DECL
X_PROC_DECL ::= ''

U_PROC_DECL ::= : TYPE
U_PROC_DECL ::= ''

V_PROC_DECL ::= Y_PROC_DECL in
V_PROC_DECL ::= ''

Y_PROC_DECL ::= DECL Z_PROC_DECL
Y_PROC_DECL ::= ''

Z_PROC_DECL ::= ; DECL Z_PROC_DECL
Z_PROC_DECL ::= ''

REC_DECL ::= struct NAME { T_REC_DECL }

T_REC_DECL ::= PARAMFIELD_DECL U_REC_DECL
T_REC_DECL ::= ''

U_REC_DECL ::= ; PARAMFIELD_DECL U_REC_DECL
U_REC_DECL ::= ''

PARAMFIELD_DECL ::= NAME : TYPE

STMT_LIST ::= STMT T_STMT_LIST
STMT_LIST ::= ''

T_STMT_LIST ::= ; STMT
T_STMT_LIST ::= ''

EXP ::= T_EXP
EXP ::= not EXP
EXP ::= LITERAL
EXP ::= CALL_STMT
EXP ::= new NAME
EXP ::= VAR
EXP ::= REF_VAR
EXP ::= DEREF_VAR
EXP ::= NAME NAME_EXP
NAME_EXP ::= NAME_CALL_STMT
NAME_EXP ::= ''

EXP ::= ( EXP )

T_EXP ::= PREC_EXP EXP

PREC_EXP ::= L_EXP

L_EXP ::= LU_EXP L2_EXP
L2_EXP ::= || LU_EXP L2_EXP
L2_EXP ::= ''

LU_EXP ::= R_EXP LU2_EXP
LU2_EXP ::= && R_EXP LU2_EXP
LU2_EXP ::= ''

R_EXP ::= A_EXP R2_EXP
R2_EXP ::= < A_EXP R2_EXP
R2_EXP ::= <= A_EXP R2_EXP
R2_EXP ::= > A_EXP R2_EXP
R2_EXP ::= >= A_EXP R2_EXP
R2_EXP ::= = A_EXP R2_EXP
R2_EXP ::= <> A_EXP R2_EXP
R2_EXP ::= ''

A_EXP ::= AU_EXP A2_EXP
A2_EXP ::= + AU_EXP A2_EXP
A2_EXP ::= - AU_EXP A2_EXP
A2_EXP ::= ''

AU_EXP ::= POW_EXP AU2_EXP
AU2_EXP ::= * POW_EXP AU2_EXP
AU2_EXP ::= / POW_EXP AU2_EXP
AU2_EXP ::= ''

POW_EXP ::= PT_EXP POW_EXP2
POW_EXP2 ::= ^ POW_EXP
POW_EXP2 ::= ''

PT_EXP ::= FIM_EXP PT2_EXP
PT2_EXP ::= . FIM_EXP PT2_EXP
PT2_EXP ::= ''

FIM_EXP ::= ( PREC_EXP )
FIM_EXP ::= VAR
FIM_EXP ::= LITERAL
FIM_EXP ::= not FIM_EXP


REF_VAR ::= ref ( VAR )

DEREF_VAR ::= deref ( VAR )

VAR ::= NAME
VAR ::= REC_VAR . NAME
REC_VAR ::= ( REC_VAR )
REC_VAR ::= CALL_STMT
REC_VAR ::= DEREF_VAR

LITERAL ::= FLOAT_LITERAL
LITERAL ::= INT_LITERAL
LITERAL ::= STRING_LITERAL
LITERAL ::= BOOL_LITERAL
LITERAL ::= null

STMT ::= ASSIGN_STMT
STMT ::= IF_STMT
STMT ::= WHILE_STMT
STMT ::= RETURN_STMT
STMT ::= CALL_STMT

STMT ::= NAME NAME_STMT
NAME_STMT ::= 

ASSIGN_STMT ::= NAME NAME_ASSIGN_STMT
ASSIGN_STMT ::= NAMELESS_ASSIGN_STMT 

NAME_ASSIGN_STMT ::= := EXP
NAME_ASSIGN_STMT ::= REC_NAME_ASSIGN_STMT := EXP
REC_NAME_ASSIGN_STMT ::= ( REC_NAME_ASSIGN_STMT )
REC_NAME_ASSIGN_STMT ::= NAME_CALL_STMT . NAME := EXP

NAMELESS_ASSIGN_STMT ::= REC_ASSIGN_STMT_VAR
REC_ASSIGN_STMT_VAR ::= ( REC_ASSIGN_STMT_VAR ) 
REC_ASSIGN_STMT_VAR ::= DEREF_VAR OPT_DOT_NAME := EXP

OPT_DOT_NAME ::= ''
OPT_DOT_NAME ::= . NAME 

IF_STMT ::= if EXP then STMT_LIST T_IF_STMT fi

T_IF_STMT ::= else STMT_LIST
T_IF_STMT ::= ''

WHILE_STMT ::= while EXP do STMT_LIST od

RETURN_STMT ::= return EXP

CALL_STMT ::= NAME NAME_CALL_STMT
NAME_CALL_STMT ::= ( T_CALL_STMT )

T_CALL_STMT ::= EXP U_CALL_STMT
T_CALL_STMT ::= ''

U_CALL_STMT ::= , EXP U_CALL_STMT
U_CALL_STMT ::= ''

TYPE ::= float
TYPE ::= int
TYPE ::= string
TYPE ::= bool
TYPE ::= NAME
TYPE ::= ref ( TYPE )
