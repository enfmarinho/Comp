PROGRAM ::= program NAME begin T_PROGRAM end

T_PROGRAM ::= DECL U_PROGRAM
T_PROGRAM ::= ''

U_PROGRAM ::= ; DECL U_PROGRAM
U_PROGRAM ::= ''

DECL ::= VAR_DECL
DECL ::= PROC_DECL
DECL ::= REC_DECL

VAR_DECL ::= var NAME T_VAR_DECL

T_VAR_DECL ::= : TYPE U_VAR_DECL
T_VAR_DECL ::= := EXP

U_VAR_DECL ::= := EXP
U_VAR_DECL ::= ''

PROC_DECL ::= procedure NAME "(" T_PROC_DECL ")" U_PROC_DECL begin V_PROC_DECL STMT_LIST end

T_PROC_DECL ::= PARAMFIELD_DECL X_PROC_DECL
T_PROC_DECL ::= ''

X_PROC_DECL ::= , PARAMFIELD_DECL X_PROC_DECL
X_PROC_DECL ::= ''

U_PROC_DECL ::= : TYPE
U_PROC_DECL ::= ''

V_PROC_DECL ::= Y_PROC_DECL in
V_PROC_DECL ::= ''

Y_PROC_DECL ::= DECL Z_PROC_DECL
Y_PROC_DECL ::= ''

Z_PROC_DECL ::= ; DECL Z_PROC_DECL
Z_PROC_DECL ::= ''

REC_DECL ::= struct NAME { T_REC_DECL }

T_REC_DECL ::= PARAMFIELD_DECL U_REC_DECL
T_REC_DECL ::= ''

U_REC_DECL ::= ; PARAMFIELD_DECL U_REC_DECL
U_REC_DECL ::= ''

PARAMFIELD_DECL ::= NAME : TYPE

STMT_LIST ::= STMT T_STMT_LIST
STMT_LIST ::= ''

T_STMT_LIST ::= ; STMT
T_STMT_LIST ::= ''

EXP ::= A_EXP
EXP ::= L_EXP
EXP ::= not EXP
EXP ::= LITERAL
EXP ::= CALL_STMT
EXP ::= new NAME
EXP ::= VAR
EXP ::= REF_VAR
EXP ::= ( EXP )

T_EXP ::= LOP_OP EXP
T_EXP ::= REL_OP EXP
T_EXP ::= ARITH_OP EXP

A_EXP ::= AU_EXP A2_EXP
A2_EXP ::= + AU_EXP A2_EXP
A2_EXP ::= - AU_EXP A2_EXP
A2_EXP ::= ''
AU_EXP ::= AF A_FAT
A_FAT ::= * AU2_EXP
A_FAT ::= / AU2_EXP
AU2_EXP ::= * AF AU2_EXP
AU2_EXP ::= / AF AU2_EXP
AU2_EXP ::= ''
AF ::= (A_EXP) | VAR | LITERAL


L_EXP ::= LU_EXP L2_EXP
L2_EXP ::= || LU_EXP L2_EXP
L2_EXP ::= ''
LU_EXP ::= LF LU2_EXP
LU2_EXP ::= && LF LU2_EXP
LU2_EXP ::= ''
LF ::= (L_EXP) | VAR | LITERAL | not VAR | not LITERAL

REF_VAR ::= ref ( VAR )

DEREF_VAR ::= deref ( T_DEREF_VAR

T_DEREF_VAR ::= VAR )

U_VAR ::= NAME DOT_NAME
DOT_NAME ::= ''
DOT_NAME ::= . NAME

VAR ::= DEREF_VAR DOT_NAME
VAR ::= (VAR_REC)
VAR_REC ::= (VAR_REC) 
VAR_REC ::= U_VAR
VAR ::= U_VAR

LITERAL ::= FLOAT_LITERAL
LITERAL ::= INT_LITERAL
LITERAL ::= STRING_LITERAL
LITERAL ::= BOOL_LITERAL
LITERAL ::= null

STMT ::= ASSIGN_STMT
STMT ::= IF_STMT
STMT ::= WHILE_STMT
STMT ::= RETURN_STMT
STMT ::= CALL_STMT

ASSIGN_STMT ::= VAR := EXP

IF_STMT ::= if EXP then STMT_LIST T_IF_STMT fi

T_IF_STMT ::= else STMT_LIST
T_IF_STMT ::= ''

WHILE_STMT ::= while EXP do STMT_LIST od

RETURN_STMT ::= return EXP

CALL_STMT ::= NAME ( T_CALL_STMT )

T_CALL_STMT ::= EXP U_CALL_STMT
T_CALL_STMT ::= ''

U_CALL_STMT ::= , EXP U_CALL_STMT
U_CALL_STMT ::= ''

TYPE ::= float
TYPE ::= int
TYPE ::= string
TYPE ::= bool
TYPE ::= {NAME}
TYPE ::= ref ( TYPE )

